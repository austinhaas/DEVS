* TODO
** Optimization: Better priority-queue implementation.
*** Consider leftist-heap from PFDS.
   - Delete is described here: https://en.wikipedia.org/wiki/Leftist_tree
     - This depends on having a pointer to the node to be deleted. I
       don't think there is any way to efficiently search for that
       node.
**** Consider a specialized delete operation
     - I'm doubting the idea I had for this. I thought the size of the
       "delete set" is fixed, since each model can only have one entry
       in the heap, but that's not true; a model could have its
       priority changed several times, resulting in multiple
       insertions before any nodes are removed.

     - Both of the proposals below suffer from the same drawback:
       keeping a list of descendent values is going to require
       significantly more storage, because there will be so much
       redundancy.

       - I think we could just have one map at the root, though.

       - These also change the complexity of findMin from O(1) to (log
         N) (or whatever it costs to check for membership in the
         delete set.
***** Proposal
     - There can only be at most one "current" priority per model.
     - Algorithm
       - Keep a map from model to current priority.
       - Whenever pop is called, keep popping if the root does not
         match the current priority for the model at root.
     - Con: A significant amout of redundancy.
***** Proposal
     - Every tree includes the set of all members.
     - Search for a node using that set.
     - Con: A significant amout of redundancy.
*** Consider splay-heaps from PFDS.
    - p. 52 "Splay trees, perhaps in combination with the ExplicitMin
      functor, are the fastest known implementation of heaps for
      applications that do not depend on persistence and that do not
      call the merge function."
      - I think our use case fits this description, but we still need
        to account for delete.
    - https://stackoverflow.com/questions/69891121/splay-tree-deletion
*** Consider the red-black impl. that has delete.
    - I think we can use ExplicitMin.
    - Actually, maybe better, since we expect
*** Notes
    - The heap is almost always a fixed size.
    - We only want to re-prioritize values.

    - We may or may not want to include infinite priorities in the
      heap.

*** Proposal
    - One leftist-heap (or splay-heap), for the main heap.
    - A second (anti-)heap for deletes.
    - Both heaps are total-ordered; i.e., the priorities/keys AND the
      values are ordered.
      - This way, the two heaps will always correspond.
      - This should be no problem, since we use ids for values in this
        case, and those should be comparable.

    - Since it is O(1) to get the root, it is very efficient to check
      if there is anything to delete.
**** Benchmark
     - Compare against existing implementation, and red-black with
       deletes.
     - Devise benchmark tests that simulate a DEVS workflow w/o having
       to implement it as DEVS.
     - Simulate pathological cases.
       - E.g., 2000 models that are passivating and then suddenly
         become active.
       - 2000 models that have a low-priority and then get a new
         higher priority.
** File these notes
*** Improve DEVS.
**** Notes
     - The state-var/action-based design may be exploitable in
       determining if one event should trigger a rollback.
     - This can also be used to look ahead and determine that a future
       event is safe, because no external event could possibly
       conflict.
**** Good things about DEVS
     - Separation of model and simulator.
       - Allows different simulators to be used.
     - The simulation topology is managed. Individual processes do
       not need to be aware of each other.
     - Process behavior can be specified asynchronously, but handled
       synchronously.
**** Problems with DEVS
     - Users must understand the DEVS algorithm while modeling.
       - I.e., the time-advance function is called, then, after the
         delay, the output function is called, and then the internal
         update function is called.
     - Ports are defined implicitly. They aren't obvious or enforced.
     - Sending messages is implemented across several functions.
       - A message is scheduled by a state update function, delayed
         by the time advance function, propagated via the output
         function, and then the message buffer is cleared in the
         internal state update function.
     - The dynamic network, and the management of it, is not obvious.

     - I think I made a very minimal, bare bones implementation of
       DEVS. It might be easier to understand and use if it had more
       structure.
       - For example, the exec model needs a name; the network
         simulator needs to know it, and the exec model also needs to
         know it.
           - Maybe this is how it should be: porcelain and plumbing.
     - :N is a special symbol not explained anywhere.

     - I just tried to create a simple state machine and it took
       forever. So much trial and error. I'd like to output more
       status messages, but it seems like a huge chore.
       - Actually, this wasn't so hard.

     - Not clear how to work with external real-time events.
       - Learn more about RT-DEVS. It sounds like the coordinator is
         responsible for managing that, but I'm unclear how that fits
         into what I've made.
       - RT-DEVS assigns one thread to each model. Each state has a
         function associated with it and the coordinator only calls
         int-update after the function returns.
         - You also have to provide an interval that tells when this
           function is expected to return and it is an error if the
           actual is outside that.
           - Is there any harm in setting a completely open interval?
         - I'm wondering if I had previously flattened all of the
           coordinators and that if that is going to be an obstacle.
**** Proposal: Add more debugging tools.
     - Trace everything that is happening.
**** Proposal: Add more abstractions.
     - Consider that some issues may be due to implementing models
       using general, low-level operations, rather than building on
       higher-level, domain-specific abstractions.
     - Example: message queues, with `send` and `receive` functions.
     - Example: A macro for processing messages using a given
       strategy.
     - Capture common patterns.
     - I have trouble imagining anything superior to Clojure's basic
       functions. For example, processing external messages can be
       implemented simply with `reduce` and `case`. Or, a `group-by`
       could be applied to batch process messages by type instead of
       message order. Adding another layer on top of that just seems
       to make things more complicated.
       - Consider abstracting these things locally. I.e., the
         modeler's responsibility.
     - Example: The model clock could translate between absolute and
       relative times.
     - Example: (current-time)
***** Consider pattern matching on messages.
**** Proposal: Model constructors
     - Map from high-level models to DEVS.
     - Example: A state machine.
     - Maybe this could cover 80% of the models.
**** Consider how this might work the state monad.
     - Sending and receiving messages could be done in an imperative
       fashion. Users wouldn't need to think about an output
       collection.
     - Maybe time-advance could be hidden, too. Any messages sent
       would be assumed to be sent immediately. Any internal update
       would be scheduled explicitly, and automatically updated if
       messages are received.
     - Messages could be cleared from the state automatically.

     - The output message buffer is cleared automatically. The
       user-level `int-update` function is only called after a delay
       that is specific to int-update. The underlying system
       automatically manages the time-advance function.

     - This could be implemented with functions that take and return
       the state.
       - (send state port msg) => state
       - (recv state port) => [state msg] ;; maybe not these
       - (recv state :next) => [state msg]

     - I'm thinking this isn't worth it. I think we can get close
       enough by threading `state` through some abstract operators
       (like, `send`).

**** Consider using an Erlang-like syntax.

**** Proposal: System protocol
     - Models will have a :system input port and a :system output
       port.
     - :system messages include things like :start, :stop, and
       :suspend.
     - Models will reply on the :system output port that an
       instruction has been completed.
     - Hierarchically, a model will propagate control signals down to
       its dependents, and wait for their responses before issuing
       its own to its parent.
**** Proposal: State machine
     - Assumptions
       - First-class states are easier to reason about and work with.
       - It's good to group `enter` and `exit` functions with states.
       - It's good to separate the outputs from the states from the
         state transition function.
     - Create states as maps of functions.
       - enter
       - int-update
       - ext-update
       - exit
     - Use a :system channel
       - This doesn't make sense. The states aren't models.
         - Consider using models.
       - A :status channel?

** Consider passing the fns start-loop-fns needs to it as args.
   - Instead of making those fns public.
** Set up a real-time, interactive cljs example.
*** Implement external events
     - The root-coordinator converts events to normal messages.
     - The receiving model will need a route all the way to the route.
       - Getting around this is too complicated and confusing.
** Add tutorial.
   - Not sure if I want to invest in this.
** Make tracing/logging easier.
   - Shouldn't need to import more than one ns.
   - Shouldn't have to think at all.
** Consider not using simple keywords for :network.
*** Consider a namespaced keyword.
    - More cumbersome.
    - Reduces legibility.
** Improve test coverage
*** Run `make coverage` to find gaps.
*** Add more dynamic structure tests.
**** Test that structure changes happen from the bottom up.
     - Remove parent, then child.
*** Determine how to validate the TMS example.
** Specify ports explicitly in models.
   - Ports can be parameterized (i.e., labeled); only need the name for this.
     - Might be better to think of this data as identifying something other than
       the name or id of the port.
   - Use to fail on mismatches.
   - Add value validators.
   - Add functions to inspect the graph.
     - E.g. which models is model x connected to?
     - This might be a better way to debug.
   - Think of this DEVS implementation as a run-time system that supports
     introspection.
*** Update atomic to ignore irrelevant inputs
**** Question
     - Is this really desired? Is it going to add overhead to every
       atomic simlulator, even though it would only be significant for
       the root simulator (since networks handle this implicitly).
**** Update "no-receiver" test.
     - The test for atomic simulators is commented out.
*** Proposal: Declare ports via methods
    - To elucidate the interface.
    - Could this buy additional clarity in the handling of messages?
      - E.g., maybe there could be different port strategies, such as
        FIFO, or order by type.
      - We don't want to require that the update fns must be defined
        within a port-translating macro.
    - Might help catch errors.
    - Optimizations could use this information.
    - The ports are static, but an entire model could be changed.
      - If they weren't static, then we'd have to check them
        frequently. And that really is a structure change.
*** Catch errors
    - Don't let something connect to a non-existent port.
** Implement parallel processing.
*** Notes
    - Push bindings with `bound-fn`.
*** Test that logging works.
*** Add tests.
** Consider tagging ex-asserts so that we can control which ones are elided.
   - We may want some to run all the time, but others only when debugging.
     - Not sure what that criteria would be.
       - A non-deterministic model wouldn't need the check after it
         has been run once.
         - Assuming it runs til completion.
       - RT input is one case. We could know that 80% of the model is
         deterministic and not need to always check that. But if the
         RT input can influence the "deterministic" part, then we
         can't guarantee that.
*** Consider adding another construct to conditionally include a block.
    - E.g., to wrap validate-network-model!.
** Benchmark.
*** Create an example for benchmarking.
**** Consider adding more arithmetic models.
**** Consider adding a model that creates multiple worker clones and compares all of their results.
     - To branch out, but still just get one answer.
*** Consider that cljs vs clj might vary significantly.
    - What should we do about that?
**** Consider exporting benchmark results, for comparison.
*** Test that logging isn't adding significant overhead when it is disabled.
*** Test indexing routes by [name port] instead of name->port.
*** Test multithreading.
    - Determine how to allocate.
      - E.g., each network could bubble up run-time info .
*** Test using an array to hold model state.
    - Use indices as model references instead of paths.
*** Test creating new records vs. updating properties.
** Improve debugging.
*** Render network using graphviz.
*** Create a "stepper" root-coordinator.
    - Like prolog.
    - Step forward and back in time. Inspect states.
** Consider parameterizing on find-simulator.
   - Would a dynamic binding suffice?
     - No, because:
       1. We'd need to rebind it within each method.
       2. Doesn't help how we set up the default.
** Implement a distributed root coordinator.
** Consider supporting a model replacement structure change.
   - I've seen this in the literature, but I don't understand what is
     gained. Why not just remove the old model and add a new one, in
     two steps? If the idea is to preserve state across those models,
     we're still going to need a way to preserve state with remove and
     add, because we might want to move a model across networks (e.g.,
     an agent that leaves one area and joins another).
** Consider adding a destructor to model.
   - Example: A model that holds a DB connection.
   - Simulations would not be functional.
*** Proposal
    - If a network model's destructor is invoked, then it will invoke the
      destructor for every model in its network.
    - If a model is removed through a network structure change, then its
      destructor will be invoked.
    - Root coordinators provide a function to invoke the top-level sim's
      destructor.
*** Consider separating RT models.
    - We don't currently have RT models, only RT root-coordinators.
** Implement broadcast networks.
   - A network model where all messages are broadcast, instead of
     using explicit routes.
*** Attach entity id to messages.
** Determine how to specify version in pom.xml.
   - Clojurescript does it in a build script: https://github.com/clojure/clojurescript/search?q=CLOJURESCRIPT_VERSION
** Consider building a GUI.
   - Use existing graphics engine.
     - SVG might be easier to work with, though.
       - three.js can render as SVG.
   - We need to add UI, anyway.
*** Graphical animation
**** Proposal: Use D3
     - force simulation
     https://github.com/d3/d3-force/blob/v2.1.1/README.md#forceSimulation
** Extend the logging system
*** Log to a file
    - And load from it. Compare stats on two historical logs.
*** Capture metrics
    - The idea is to capture some core bits of information about the internal,
      run-time behavior and make it presentable.
      - # of steps
      - # of parallel processes
      - # of messages
      - by network
*** Capture logs w/o printing
    - Allow user to query and inspect.
** Optimization: Flatten the network
   - The current update implementation is naive. It proceeds in a depth-first
     order, but it could be more memory efficient. For example, if a network has
     1000 atomic models and the last one is a deep network, we can't finish
     processing the current network until the deep network is finished.
     - Consider ordering siblings so that the longest branch is first.
     - Consider sorting the networks topologically.
   - The flattened network could be an explicit graph; the current network
     implementation relies on recursion to traverse the graph.
*** Determine how to handle routing.
    - We'd need to map from atomic model to local routing table.
    - Consider a global routing table.
    - Routing could be optimized.
      - Because we'd have it all in a single table.
    - I suspect we still want to batch messages by network.
      - That may conflict with optimizing routes.
*** Proposal: Flatten the hierarchy
    - No longer recursive.
    - Presumably more efficient.
    - No need for complicated update algorithms to exploit parallelism.
**** Consider an algorithm/abstraction for an implicit hierarchy.
     - Route mail.
     - Structure changes.
       - Map from model to network?
         - How is the network represented?
*** On compressing routes
    - I think I determined that this wouldn't make as big of an impact as I
      originally assumed.
    - We might not want to disallow a route that goes from a network
      in directly to a network out, because compressed routes may
      violate that restriction.
**** Incomplete code, with documentation and notes.
 (defn connect
   [pkg [snd-name snd-port rcv-name rcv-port input-fn]]
   ;; In the connections graph, nodes are [name port] pairs (not models!). A path
   ;; between two models is either simple: between two atomic models in the same
   ;; network, or it may be composed of multiple segments that span networks.

   ;; A proper path suffix is a path that terminates in an atomic model.

   ;; fwd is a trie and a DAG. Each path in the trie represents one forward edge
   ;; in the DAG. The height of the DAG is equal to the depth of the network
   ;; hierarchy. The graph may contain incomplete paths, which start and/or end
   ;; with a network.

   ;; opt is a compressed version of fwd. The opt DAG has depth = 1. opt replaces
   ;; each proper suffix path in fwd with a single compressed edge from the
   ;; current node to a terminal node.

   ;; For example, if fwd = {A-B, B-C, C-D}, then opt = {A-D, B-D, C-D}.

   ;; If D is a network, however, then opt = {}, because there are no paths from
   ;; any node to a terminal.

   ;; opt really is {A-D_1, B-D_1, C-D_1}, because there can be more than one
   ;; path from a node to another.

   ;; The basic idea is to get all of the suffix paths below the new
   ;; connection, if there are any, and then start moving up,
   ;; following the reverse graph, recording compressed connections.

   ;; We may need another data structure to map from component-fns ->
   ;; combined-fns, to support delete, since we can't expect function
   ;; compositions to compare equally.

   (let [network? (fn [x] (not (contains? (:state pkg) x)))]
     ;; Use paths as canonical names for models in a flattened
     ;; hierarchy. Substitute internal :network references with the model's
     ;; external name.
     (let [snd-path (if (= :network snd-name)
                      *path*
                      (conj *path* snd-name))
           rcv-path (if (= :network rcv-name)
                      *path*
                      (conj *path* rcv-name))]
       (let [{:keys [fwd rev opt]} pkg]
         (let [fwd (assoc-in fwd [snd-path snd-port rcv-path rcv-port] input-fn)
               rev (assoc-in rev [rcv-path rcv-port snd-path snd-port] input-fn)
               ;; Propagate compressed paths up through the network. This is an
               ;; online algorithm. It precomputes all of the path traversals.

               ;; Use a prefix table and a suffix table. That will be easier to
               ;; understand.

               ;; Find each set and compute prefixes X [new] x suffixes.

               ;; The tradeoff with this approach is the memory use and the
               ;; maintenance of the prefix and suffix tables, with no guarantee
               ;; that any of it will ever be needed. This may be optimal for
               ;; some simulations.

               ;; For example, there could be a signal that originates deep
               ;; inside a model and travels deep down into many others, but the
               ;; signal is rare, like an alarm. It could require a lot of work
               ;; to build all of those connections and they may never be used.

               ;; How could this be lazy?

               ;; Would it be better to cache routes?

               ;; We should abstract this API. There isn't a one-size-fits-all
               ;; implementation. We just need connect, disconnect, and route.

               ;; Also, optimizing this lookup is not the main reason to flatten
               ;; the hierarchy, parallel updates is.

               ;; This could be even more efficient through static analysis of
               ;; the network topology: all possible models, ports, connections,
               ;; etc.

               ;; The simple method needs to batch values at each step of the
               ;; traversal.


               opt (loop [connections (cond
                                        ;; If the new connection terminates at a network,
                                        ;; get any compressed paths rooted there, and
                                        ;; extend each with this new segment.
                                        (network? rcv-path) (for [[rcv-path' rcv-port'->fs] (get-in opt [rcv-path rcv-port])
                                                                  [rcv-port' fs]            rcv-port'->fs
                                                                  f                         fs]
                                                              [snd-path snd-port rcv-path' rcv-port' (comp f input-fn)])
                                        ;; If the new connection terminates at an atomic
                                        ;; model, then it is already compressed.
                                        :else               [[snd-path snd-port rcv-path rcv-port input-fn]])
                          opt         opt]
                     (if (empty? connections)
                       opt
                       (let [[snd-path snd-port rcv-path rcv-port input-fn] (first connections)
                             opt                                            (update-in opt [snd-path snd-port rcv-path rcv-port] (fnil conj #{}) input-fn)
                             connections                                    (into (rest connections)
                                                                                  (for [[snd-path' snd-port'->fs] (get-in rev [snd-path snd-port])
                                                                                        [snd-port' fs]            snd-port'->fs
                                                                                        f                         fs]
                                                                                    [snd-path' snd-port' rcv-path rcv-port (comp input-fn f)]))]
                         (recur connections opt))))]
          (assoc pkg
                 :fwd fwd
                 :rev rev
                 :opt opt))))))
** RT optimization: Consider that the RT model could accurately predict the next state
   - Assuming that a human-in-the-loop (or other RT component)
     performs no action during the overwhelming majority of the steps,
     we could start computing the next event in advance, so that it is
     ready to display immediately.
   - If a user did perform an action, we'd only have to repeat the step one
     extra time, which may or may not be prohibitively expensive.
     - An even better solution would be something like Time Warp, where we could
       determine just what needs to be updated. For example, in our restaurant
       simulation, a user action should have very little bearing on the next
       step.
