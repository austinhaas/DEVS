* TODO
** DONE Determine if we are handling network structure correctly.
   - I don't think single-delay and fixed-delay should differ.
   - Should the network structure changes wait until after all other transitions
     are processed?
   - Answer: not really
*** DONE Check what the papers say about this.
**** [[https://repository.lib.ncsu.edu/bitstream/handle/1840.4/6989/1998_0056.pdf?sequence=1][Barros. Abstract Simulators for the DSDE Formalism]]
     - Note that this isn't a parallel simulator.
     - Section 5.2
       - In the network simulator, network executives are updated after the
         other models, within the scope of each network.
**** [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.302.3385&rep=rep1&type=pdf][Himmelspach. Uhrmacher. Processing dynamic PDEVS models]]
     - Study this. This approach may be better than what we've implemented. I
       like the way the guarantee step checks each component before advancing
       sim time. This might be simpler and more obvious than how we are
       implicitly handling real-time.

       - One problem with this is that models would need to use the time-advance
         function to get "pacing" updates from the coordinator, and we want that
         to be based on, for example, rAF, and not a number that the model would
         know to report.

     - I don't think this supports the idea I'm trying to solve. I don't think
       either paper considers non-zero time-advances.

** DONE Convert code to hyperreal time base
** DONE Is this implemenation wrong?
   - We never advance to t+ε before delivering mail.
   - We're not doing that. We're requiring states to last at least 1ε, but
     messages are delivered immediately.
** DONE Revise the network structure change implementation
*** Problems w/ the current implementation
    - Structure change messages are mixed with normal, domain messages.
    - It muddles the semantics of the network.
      - It makes the network seem like a model-level entity, with its own state
        distinct from the state of its components, and it can receive
        messages. And none of that is user-configurable, unlike models.
    - It does not provide any guidance to the user for how to handle
      structure changes within the simulation domain.
      - Example: Two models both want to add a new model to the network, but
        there is a domain constraint that only one more model can be added.
      - This example can be implemented in the current system, but it requires
        more effort than the naive approach, and the system doesn't offer the
        modeler any help for how to do that. One source of confusion is that the
        solution requires dropping into the domain model (to use normal
        messages).
*** Proposal: Every network has a single executive.
    - The exec is an atomic model, distinguished to the network.
    - The exec is extended with two additional fns:
      - initial-network - Called by the simulator immediately after
        `initialize`. Returns the initial state of the network. Returns delta
        change messages.
      - network-updates - Called by the simulator immediately after
        `collect-mail`. Returns delta change messages.
    - The exec is solely responsible for the network structure.
    - The default exec returns a static network and then passivates for
      eternity.
    - Non-exec models shouldn't know anything about the network structure and
      changing it. A model may emit a message, which is routed to the exec, and
      which may trigger a structure change, but the model should only emit
      information in the context of the domain and not in the context of DEVS
      structures. The exec interpretes messages into structure changes.
    - Separating network change messages from regular mail allows us to
      implement structure changes before routing mail.
*** Proposal: Every model can send network messages, but they are distinct from domain mail.
    - We need every model to be able to send network messages to support
      external events, because external events require recursively adding routes
      from a model to the root, and that wouldn't work because networks can't be
      (atomic) executives, and we can't have more than one exec.
** DONE Add coupled model validation
** Make cljs work
** Enforce NIA / improve examples
**** Update root coordinators to require that timestamps are increasing.
** Consider if network-simulator should throw an exception if transition is called incorrectly
   - I.e., called without any models being imminent or receiving any messages.
   - Technically, a network sim could receive messages that aren't currently
     routed to any component. I think we just want to check if it was called
     without any messages at all.
   - The question is: what would this gain? Maybe it is better for this
     implementation to be robust than throw an error.
** Setup dynamic network
** Setup RT system
** Update other examples/tests.
** Implement external events
    - The root-coordinator converts events to normal messages.
    - The receiving model will need a route all the way to the route.
      - Getting around this is too complicated and confusing.
** Add more dynamic structure tests.
** Setup a RT runner.
** Consider removing find-simulator.
   - If we don't need it, removing would simplify things.
** Update RT code / tests
** Add more tests.
*** Test rt-atomic-simulator confluent-update
*** Test rt-network-simulator dynamic structure
*** Check that a rt-model that is imminent handles the no-op case correctly.
    - I'm concerned this will be handled by a confluent update fn, when it
      should be an internal-update.
*** Test that structure changes happen from the bottom up.
    - Remove parent, then child.
*** Test removing a model without disconnecting it first.
*** Test a mixed RT and non-RT network.
*** Check that dynamic structure changes are valid.
*** Add tests for parallelization.
*** Determine how to validate the TMS example.
** update docs
   - Every state must have positive duration; message delivery is instantaneous.
   - NIA
   - A model can emit a message at the same instant it is created if its
     initial-elapsed-time = time-advance.
*** Why not mix structure change messages with domain mail?
    - I suspect that the way we are sending network structure change messages,
      as if they were regular mail, is confusing.

      - They have routes, but we don't normally send messages /to/ the
        network. We route messages through the network, but the network
        itself is not a destination.

      - Seems a little weird that models have to have routes for structure
        changes. It means that models have an implicit port that is for these
        types of messages. An exec might be clearer in this regard. Even
        worse, perhaps, is that we need an atomic model that understands that
        it emits structure change messages and the parent network that knows
        how to route those. On second thought, I guess it isn't weird that a
        network understands what it's components are.

        - But, if want any model to be able to connect to external events, an
          exec might be overly restrictive.

          - Atomic models don't know about external events; network models
            do, because that is where routes are defined.
            - Exec models know about the network.
*** DONE Consider move to hyperreal time base.
**** Problem statement
     - Zero-length delays cause any notion of causation to be lost.
     - Users must understand that the transition function may be called multiple
       times without time advancing.
     - Issues with dynamic structure: if an event causes a model to be removed
       immediately, there is a chicken and egg paradox.
**** Proposal: Use a superdense time base.
     - I get the impression this is the most common solution, and there are many
       variations (Nutaro).
     - I think this solves the issue of reproducibility, but it doesn't clarify
       confusion around simultaneity from the user's perspective.
**** Proposal: Use a hyperreal time base.
     - The hyperreal implementation is like Barros, but not the simulation
       semantics.
     - Not sure about the Non-Instantaneous Assumption.
     - Differences from Barros:
       - Barros allows zero-length delays, but imposes an infinitesimal delay (ε)
         to every transition. We don't allow zero-length delays, and so don't
         need to add an additional delay.
       - Barros requires three steps (of duration ε) for a model to respond to
         external input with an output. (See Mealy Machine example.) I think this
         is to split the updates into something like: original model, w/ input,
         new state w/ output, new state. Our version follows the usual DEVS
         semantics, with the constraint against zero-length delays.
     - Don't allow zero-length delays.
       - Rationale: There's no such thing in the real-world. (I think) that is
         mostly equivalent to Barros; in that system, the modeler can specify a
         zero-length delay, but the system imposes an infinitesimal duration. The
         modeler still needs to be aware of this delay, so that they can subtract
         it from the next delay, if they want the outputs to align to whole
         numbers.
       - With this constraint, each simulator will only be updated once per time
         point.
       - Consequence: the earliest response to an external event is t+ε.
     - I like that the hyperreal values are all on the number line. They have a
       solid mathematical and physical basis (Barros).
     - My rationale is that zero-length delays are fundamentally flawed, and
       using the hyperreal base lets us avoid problems and add clarity without
       sacrificing anything that wasn't already broken. For example, if a model
       is triggered when exactly 5 inputs arrive at the "same time", then that
       notion of simultaneity should be modeled with some interval (e.g., events
       occurring within 100ms), and not rely on the inputs arriving at exactly
       the same point in time, which is impossible in the real world.
     - I don't see the value in accomodating these zero-delay events. Superdense
       time, IIUC, works around them, so that modelers can continue to ignore the
       inherent problem. Barros allows them in some sense, but still adds an
       infinitesimal delay, so in what sense does it really allow them?
****** Problem: How do we construct a model that sums all inputs at standard time t?
       - i.e., We want it to ignore the infinitesimal component.
       - I think we should have to choose an interval. There's no way to say, do
         this after all the events at 2ε, 3ε, etc. have passed
****** Problem: How long does it take to send a message? How long until a transition goes into effect?
**** Implement hyperreal system w/ new sim algorithm
** Consider adding join and leave methods to simulator.
*** Consider whether the simulator or the model should be responsible for constructor/destructor.
    - Based on the implementation of external RT events, I'm starting to think
      that the model should be abstract and the simulator handles implementation.
      - Maybe the simulator is configurable; e.g., a function maps specs to
        implementations.
*** Consider adding destructor to models.
**** Determine how this would be used.
***** Proposal
      - If a network model's destructor is invoked, then it will invoke the
        destructor for every model in its network.
      - If a model is removed through a network structure change, then its
        destructor will be invoked.
      - Root coordinators provide a function to invoke the top-level sim's
        destructor.
** Add explicit ports.
   - Ports can be parameterized (i.e., labeled); only need the name for this.
     - Might be better to think of this data as identifying something other than
       the name or id of the port.
   - Use to fail on mismatches.
   - Add value validators.
   - Add functions to inspect the graph.
     - E.g. which models is model x connected to?
     - This might be a better way to debug.
   - Think of this DEVS implementation as a run-time system that supports
     introspection.
*** Consider declaring ports in models.
    - To elucidate the interface.
    - Could this buy additional clarity in the handling of messages?
      - E.g., maybe there could be different port strategies, such as
        FIFO, or order by type.
      - We don't want to require that the update fns must be defined
        within a port-translating macro.
    - Might help catch errors.
      - Don't let something connect to a non-existent port.
    - Optimizations could use this information.
**** Proposal: Use network structure messages.
     - Adding a new model entails establishing its interface.
     - This is consistent with at least one of the dynamic structure papers.
** Setup broadcast networks.
*** Attach entity id to messages.
** Flatten the network
   - Seems like it could be simpler.
     - Don't need to store local mail.
     - Don't need intermediate network structures.
       - There is one priority queue.
       - No local mail.
   - The current update implementation is naive. It proceeds in a depth-first
     order, but it could be more memory efficient. For example, if a network has
     1000 atomic models and the last one is a deep network, we can't finish
     processing the current network until the deep network is finished.
     - Consider ordering siblings so that the longest branch is first.
     - Consider sorting the networks topologically.
   - The flattened network could be an explicit graph; the current network
     implementation relies on recursion to traverse the graph.
*** Determine how to handle routing.
    - We'd need to map from atomic model to local routing table.
    - Consider a global routing table.
    - Routing could be optimized.
      - Because we'd have it all in a single table.
    - I suspect we still want to batch messages by network.
      - That may conflict with optimizing routes.
*** Proposal: Flatten the hierarchy
    - No longer recursive.
    - No need to be concerned about passing mail around.
    - Presumably more efficient.
    - No need for complicated update algorithms to exploit parallelism.
**** Consider an algorithm/abstraction for an implicit hierarchy.
     - Route mail.
     - Structure changes.
       - Map from model to network?
         - How is the network represented?
** Possible optimization: use transducers for the route fn.
   - I think I did this originally and I just didn't like the added complexity.
   - One possible benefit, besides perf, is that it might make the purpose
     clearer to people who are familiar with Clojure's transducers.
** Consider building a GUI.
   - Use existing graphics engine.
     - SVG might be easier to work with, though.
       - three.js can render as SVG.
   - We need to add UI, anyway.
   - I believe we need more information management support than we can get from
     text alone.
*** Graphical animation
**** Proposal: Use D3
     - force simulation
     https://github.com/d3/d3-force/blob/v2.1.1/README.md#forceSimulation
     - Might be a great application/showcase for the customizable logging
       system.
     - Consider using the logging system to capture the state changes.
       - Unsure if this is a good idea. The internal state of the system is
         distinct from the simulation messages.
** Determine how to specify version in pom.xml.
   - Clojurescript does it in a build script: https://github.com/clojure/clojurescript/search?q=CLOJURESCRIPT_VERSION
** RT optimization: Consider that the RT model could accurately predict the next state
   - Assuming that a human-in-the-loop (or other RT component) performs no
     action the overwhelming majority of the steps, we could start computing the
     next event in advance, so that it is ready to display immediately.
   - If a user did perform an action, we'd only have to repeat the step one
     extra time, which may or may not be prohibitively expensive.
     - An even better solution would be something like Time Warp, where we could
       determine just what needs to be updated. For example, in our restaurant
       simulation, a user action should have very little bearing on the next
       step.
** Add tutorial.
** Set up cljs example.
** Check that a model has no connections before removing it.
   - Make it optional
   - In dev mode, all checks should be enabled.
   - Add tests.
** Implement structure changes for updating a model.
   - A model could be replaced with a different implementation, while
     maintaining the same state.
   - Check the literature to see what the intention is.
** Benchmark.
*** Create an example for benchmarking.
*** Consider that cljs vs clj might vary significantly.
    - What should we do about that?
**** Consider exporting benchmark results, for comparison.
*** Test that logging isn't adding significant overhead when it is disabled.
*** Test indexing routes by [name port] instead of name->route.
*** Test multithreading.
    - We'll need to bubble up the number of simulators that need to be updated
      in each branch of the network hierarchy, and allocate resources
      accordingly.
*** Test storing a ref to models fns in the simulator.
    - Instead of looking them up in the model.
*** Test using an array to hold model state.
    - Use indices as model references instead of paths.
*** Test creating new records vs. updating properties.
** Extend the logging system
*** Log to a file
    - And load from it. Compare stats on two historical logs.
*** Capture metrics
    - The idea is to capture some core bits of information about the internal,
      run-time behavior and make it presentable.
      - # of steps
      - # of parallel processes
      - # of messages
      - by network
*** Capture logs w/o printing
    - Allow user to query and inspect.
*** Handle key system messages specially.
    - E.g., make it easy to control the handling of mail and network structure
      change messages.
** Consider allowing pass thru connections for networks.
   - Can't create a "pass thru" connection where an input to :N
     connects to an output of :N.
   - I seem to recall this being explicitly disallowed in the literature, but I
     can't recall where. I'm not sure what it means to allow this.
     - I may have been thinking of direct feedback loops, which are
       forbidden in the main devs book.
   - This could be useful for debugging.
   - Argument against: The NIA does not allow it. A model cannot produce output
     based on an input without advancing time.
** Improve debugging.
*** Render network using graphviz.
*** Stepper
    - Like prolog.
    - Step forward and back in time. Inspect states.
** Implement a distributed root coordinator.
   - I've considered using atoms with listeners, like an async "mailbox", but it
     is awkward, if not illegal, for the listener to modify the thing it is
     listening to (e.g., to empty the mailbox after reading it).
