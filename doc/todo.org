* TODO
** Set up a real-time, interactive cljs example.
*** Implement external events
     - The root-coordinator converts events to normal messages.
     - The receiving model will need a route all the way to the route.
       - Getting around this is too complicated and confusing.
** Add tutorial.
   - Not sure if I want to invest in this.
** Make tracing/logging easier.
   - Shouldn't need to import more than one ns.
   - Shouldn't have to think at all.
** Consider not using simple keywords for :network.
*** Consider a namespaced keyword.
    - More cumbersome.
    - Reduces legibility.
** Improve test coverage
*** Run `make coverage` to find gaps.
*** Add more dynamic structure tests.
**** Test that structure changes happen from the bottom up.
     - Remove parent, then child.
*** Determine how to validate the TMS example.
** Specify ports explicitly in models.
   - Ports can be parameterized (i.e., labeled); only need the name for this.
     - Might be better to think of this data as identifying something other than
       the name or id of the port.
   - Use to fail on mismatches.
   - Add value validators.
   - Add functions to inspect the graph.
     - E.g. which models is model x connected to?
     - This might be a better way to debug.
   - Think of this DEVS implementation as a run-time system that supports
     introspection.
*** Update atomic to ignore irrelevant inputs
**** Question
     - Is this really desired? Is it going to add overhead to every
       atomic simlulator, even though it would only be significant for
       the root simulator (since networks handle this implicitly).
**** Update "no-receiver" test.
     - The test for atomic simulators is commented out.
*** Proposal: Declare ports via methods
    - To elucidate the interface.
    - Could this buy additional clarity in the handling of messages?
      - E.g., maybe there could be different port strategies, such as
        FIFO, or order by type.
      - We don't want to require that the update fns must be defined
        within a port-translating macro.
    - Might help catch errors.
    - Optimizations could use this information.
    - The ports are static, but an entire model could be changed.
      - If they weren't static, then we'd have to check them
        frequently. And that really is a structure change.
*** Catch errors
    - Don't let something connect to a non-existent port.
** Implement parallel processing.
*** Notes
    - Push bindings with `bound-fn`.
*** Test that logging works.
*** Add tests.
** Consider tagging ex-asserts so that we can control which ones are elided.
   - We may want some to run all the time, but others only when debugging.
     - Not sure what that criteria would be.
       - A non-deterministic model wouldn't need the check after it
         has been run once.
         - Assuming it runs til completion.
       - RT input is one case. We could know that 80% of the model is
         deterministic and not need to always check that. But if the
         RT input can influence the "deterministic" part, then we
         can't guarantee that.
*** Consider adding another construct to conditionally include a block.
    - E.g., to wrap validate-network-model!.
** Benchmark.
*** Create an example for benchmarking.
**** Consider adding more arithmetic models.
**** Consider adding a model that creates multiple worker clones and compares all of their results.
     - To branch out, but still just get one answer.
*** Consider that cljs vs clj might vary significantly.
    - What should we do about that?
**** Consider exporting benchmark results, for comparison.
*** Test that logging isn't adding significant overhead when it is disabled.
*** Test indexing routes by [name port] instead of name->port.
*** Test multithreading.
    - Determine how to allocate.
      - E.g., each network could bubble up run-time info .
*** Test using an array to hold model state.
    - Use indices as model references instead of paths.
*** Test creating new records vs. updating properties.
** Improve debugging.
*** Render network using graphviz.
*** Create a "stepper" root-coordinator.
    - Like prolog.
    - Step forward and back in time. Inspect states.
** Consider parameterizing on find-simulator.
   - Would a dynamic binding suffice?
     - No, because:
       1. We'd need to rebind it within each method.
       2. Doesn't help how we set up the default.
** Implement a distributed root coordinator.
** Consider supporting a model replacement structure change.
   - I've seen this in the literature, but I don't understand what is
     gained. Why not just remove the old model and add a new one, in
     two steps? If the idea is to preserve state across those models,
     we're still going to need a way to preserve state with remove and
     add, because we might want to move a model across networks (e.g.,
     an agent that leaves one area and joins another).
** Consider adding a destructor to model.
   - Example: A model that holds a DB connection.
   - Simulations would not be functional.
*** Proposal
    - If a network model's destructor is invoked, then it will invoke the
      destructor for every model in its network.
    - If a model is removed through a network structure change, then its
      destructor will be invoked.
    - Root coordinators provide a function to invoke the top-level sim's
      destructor.
*** Consider separating RT models.
    - We don't currently have RT models, only RT root-coordinators.
** Implement broadcast networks.
   - A network model where all messages are broadcast, instead of
     using explicit routes.
*** Attach entity id to messages.
** Determine how to specify version in pom.xml.
   - Clojurescript does it in a build script: https://github.com/clojure/clojurescript/search?q=CLOJURESCRIPT_VERSION
** Consider building a GUI.
   - Use existing graphics engine.
     - SVG might be easier to work with, though.
       - three.js can render as SVG.
   - We need to add UI, anyway.
*** Graphical animation
**** Proposal: Use D3
     - force simulation
     https://github.com/d3/d3-force/blob/v2.1.1/README.md#forceSimulation
** Extend the logging system
*** Log to a file
    - And load from it. Compare stats on two historical logs.
*** Capture metrics
    - The idea is to capture some core bits of information about the internal,
      run-time behavior and make it presentable.
      - # of steps
      - # of parallel processes
      - # of messages
      - by network
*** Capture logs w/o printing
    - Allow user to query and inspect.
** Optimization: Flatten the network
   - The current update implementation is naive. It proceeds in a depth-first
     order, but it could be more memory efficient. For example, if a network has
     1000 atomic models and the last one is a deep network, we can't finish
     processing the current network until the deep network is finished.
     - Consider ordering siblings so that the longest branch is first.
     - Consider sorting the networks topologically.
   - The flattened network could be an explicit graph; the current network
     implementation relies on recursion to traverse the graph.
*** Determine how to handle routing.
    - We'd need to map from atomic model to local routing table.
    - Consider a global routing table.
    - Routing could be optimized.
      - Because we'd have it all in a single table.
    - I suspect we still want to batch messages by network.
      - That may conflict with optimizing routes.
*** Proposal: Flatten the hierarchy
    - No longer recursive.
    - Presumably more efficient.
    - No need for complicated update algorithms to exploit parallelism.
**** Consider an algorithm/abstraction for an implicit hierarchy.
     - Route mail.
     - Structure changes.
       - Map from model to network?
         - How is the network represented?
*** On compressing routes
    - I think I determined that this wouldn't make as big of an impact as I
      originally assumed.
    - We might not want to disallow a route that goes from a network
      in directly to a network out, because compressed routes may
      violate that restriction.
**** Incomplete code, with documentation and notes.
 (defn connect
   [pkg [snd-name snd-port rcv-name rcv-port input-fn]]
   ;; In the connections graph, nodes are [name port] pairs (not models!). A path
   ;; between two models is either simple: between two atomic models in the same
   ;; network, or it may be composed of multiple segments that span networks.

   ;; A proper path suffix is a path that terminates in an atomic model.

   ;; fwd is a trie and a DAG. Each path in the trie represents one forward edge
   ;; in the DAG. The height of the DAG is equal to the depth of the network
   ;; hierarchy. The graph may contain incomplete paths, which start and/or end
   ;; with a network.

   ;; opt is a compressed version of fwd. The opt DAG has depth = 1. opt replaces
   ;; each proper suffix path in fwd with a single compressed edge from the
   ;; current node to a terminal node.

   ;; For example, if fwd = {A-B, B-C, C-D}, then opt = {A-D, B-D, C-D}.

   ;; If D is a network, however, then opt = {}, because there are no paths from
   ;; any node to a terminal.

   ;; opt really is {A-D_1, B-D_1, C-D_1}, because there can be more than one
   ;; path from a node to another.

   ;; The basic idea is to get all of the suffix paths below the new
   ;; connection, if there are any, and then start moving up,
   ;; following the reverse graph, recording compressed connections.

   ;; We may need another data structure to map from component-fns ->
   ;; combined-fns, to support delete, since we can't expect function
   ;; compositions to compare equally.

   (let [network? (fn [x] (not (contains? (:state pkg) x)))]
     ;; Use paths as canonical names for models in a flattened
     ;; hierarchy. Substitute internal :network references with the model's
     ;; external name.
     (let [snd-path (if (= :network snd-name)
                      *path*
                      (conj *path* snd-name))
           rcv-path (if (= :network rcv-name)
                      *path*
                      (conj *path* rcv-name))]
       (let [{:keys [fwd rev opt]} pkg]
         (let [fwd (assoc-in fwd [snd-path snd-port rcv-path rcv-port] input-fn)
               rev (assoc-in rev [rcv-path rcv-port snd-path snd-port] input-fn)
               ;; Propagate compressed paths up through the network. This is an
               ;; online algorithm. It precomputes all of the path traversals.

               ;; Use a prefix table and a suffix table. That will be easier to
               ;; understand.

               ;; Find each set and compute prefixes X [new] x suffixes.

               ;; The tradeoff with this approach is the memory use and the
               ;; maintenance of the prefix and suffix tables, with no guarantee
               ;; that any of it will ever be needed. This may be optimal for
               ;; some simulations.

               ;; For example, there could be a signal that originates deep
               ;; inside a model and travels deep down into many others, but the
               ;; signal is rare, like an alarm. It could require a lot of work
               ;; to build all of those connections and they may never be used.

               ;; How could this be lazy?

               ;; Would it be better to cache routes?

               ;; We should abstract this API. There isn't a one-size-fits-all
               ;; implementation. We just need connect, disconnect, and route.

               ;; Also, optimizing this lookup is not the main reason to flatten
               ;; the hierarchy, parallel updates is.

               ;; This could be even more efficient through static analysis of
               ;; the network topology: all possible models, ports, connections,
               ;; etc.

               ;; The simple method needs to batch values at each step of the
               ;; traversal.


               opt (loop [connections (cond
                                        ;; If the new connection terminates at a network,
                                        ;; get any compressed paths rooted there, and
                                        ;; extend each with this new segment.
                                        (network? rcv-path) (for [[rcv-path' rcv-port'->fs] (get-in opt [rcv-path rcv-port])
                                                                  [rcv-port' fs]            rcv-port'->fs
                                                                  f                         fs]
                                                              [snd-path snd-port rcv-path' rcv-port' (comp f input-fn)])
                                        ;; If the new connection terminates at an atomic
                                        ;; model, then it is already compressed.
                                        :else               [[snd-path snd-port rcv-path rcv-port input-fn]])
                          opt         opt]
                     (if (empty? connections)
                       opt
                       (let [[snd-path snd-port rcv-path rcv-port input-fn] (first connections)
                             opt                                            (update-in opt [snd-path snd-port rcv-path rcv-port] (fnil conj #{}) input-fn)
                             connections                                    (into (rest connections)
                                                                                  (for [[snd-path' snd-port'->fs] (get-in rev [snd-path snd-port])
                                                                                        [snd-port' fs]            snd-port'->fs
                                                                                        f                         fs]
                                                                                    [snd-path' snd-port' rcv-path rcv-port (comp input-fn f)]))]
                         (recur connections opt))))]
          (assoc pkg
                 :fwd fwd
                 :rev rev
                 :opt opt))))))
** RT optimization: Consider that the RT model could accurately predict the next state
   - Assuming that a human-in-the-loop (or other RT component)
     performs no action during the overwhelming majority of the steps,
     we could start computing the next event in advance, so that it is
     ready to display immediately.
   - If a user did perform an action, we'd only have to repeat the step one
     extra time, which may or may not be prohibitively expensive.
     - An even better solution would be something like Time Warp, where we could
       determine just what needs to be updated. For example, in our restaurant
       simulation, a user action should have very little bearing on the next
       step.
